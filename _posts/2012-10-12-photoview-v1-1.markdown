---
layout: post
title: PhotoView v1.1
date: '2012-10-12 00:00:00'
---

As you may or not know, I released a small library as part of the work I did for photup (it was actually created before that) which contained an ImageView which could be scaled, dragged and double-tapped.<!--more--> Even though I released it onto GitHub about 2 months ago, I haven&#8217;t really maintained it since. Until now. I&#8217;ve spent a good few days improving it, making it better and easier to use, and I think I&#8217;ve achieved both in today&#8217;s release: v1.1.

##### Sample Application

I&#8217;ve uploaded the sample app to Google Play, meaning you can have a play with it easily.  
<a href="http://play.google.com/store/apps/details?id=uk.co.senab.photoview.sample" target="_blank"><img alt="Download on Google Play" src="http://i1.wp.com/www.android.com/images/brand/android_app_on_play_logo_small.png" data-recalc-dims="1" /></a>

#### Improving it

I&#8217;m not going to go too much into the technical details of how PhotoView has improved (you can look at the GitHub commit log for that), but I&#8217;ll outline some of the big points:

*   PhotoView was previously a bit flaky when used in scrolling ViewGroups, especially horizontally scrolling ones such as ViewPager. This is no longer the case in v1.1, and PhotoView now handles this with ease. For instance, the ViewPager won&#8217;t scroll unless you&#8217;re at the edge of the Drawable, just as you expect.
*   To my shame, PhotoView wasn&#8217;t previously using a touch slop (a low-pass on drag events) so it would sometimes jump around a lot. v1.1 fixes this.
*   There are quite a few other fixes and improvements in there but I won&#8217;t bore you with the details.

#### Easier to use

Previously PhotoView was a class which extended from ImageView, this allowed very easy access to the callbacks it needed (such as onTouchEvent(), setImageDrawable() & setFrame()). While it was easy for me to implement it this way, it&#8217;s not so easy for developers to actually use it. I&#8217;d be surprised if you don&#8217;t have a large hierarchy of ImageView derivatives in your projects already, so adding another into the mix isn&#8217;t very useful at all.

Thus, in v1.1, I decided to refactor the library so that it can work with any***** ImageView easily, and the result is PhotoViewAttacher. The usage of PhotoViewAttacher is actually very simple:

<pre>ImageView mImageView;
PhotoViewAttacher mAttacher;

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // Any implementation of ImageView can be used!
    mImageView = (ImageView) findViewById(R.id.iv_photo);

    // Set the Drawable displayed
    Drawable bitmap = getResources().getDrawable(R.drawable.wallpaper);
    mImageView.setImageDrawable(bitmap);

    // Attach a PhotoViewAttacher, which takes
    // care of all of the zooming functionality.
    mAttacher = new PhotoViewAttacher(mImageView);
}

// If you later call mImageView.setImageDrawable, etc
// then you just need to call
attacher.update();</pre>

Doesn&#8217;t get much simpler than that! What actually happens when you create a PhotoViewAttacher is that it attaches a number of listeners to the ImageView:

*   <a href="https://developer.android.com/reference/android/view/View.OnTouchListener.html" target="_blank">OnTouchListener</a>. Pretty obvious why it needs this, so it can react to any touch events.
*   <a href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener.html" target="_blank">OnGlobalLayoutListener</a>. This isn&#8217;t a very well known listener (and for good reason) but it allows PhotoViewAttacher to be notified whenever **any** of the Views in the hierarchy changes. We don&#8217;t care about other Views but we need this to be able to react if the ImageView&#8217;s bounds change. Ideally I would have used <a href="https://developer.android.com/reference/android/view/View.OnLayoutChangeListener.html" target="_blank">OnLayoutChangeListener</a> but that&#8217;s only available from API level 11+.

And that&#8217;s it, everything else in the library is concerned with handling touch events, so have a dig in the code!  
**any ImageView that doesn&#8217;t already have a <a href="https://developer.android.com/reference/android/view/View.OnTouchListener.html" target="_blank">View.OnTouchListener</a> set on it*